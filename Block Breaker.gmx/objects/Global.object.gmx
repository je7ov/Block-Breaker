<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
randomize();

// Check for multiple persistent instances
if(instance_number(Global) &gt; 1) instance_destroy();

// PLAYER INPUT
global.key_fire = mouse_check_button_pressed(mb_left);
global.key_fire_released = mouse_check_button_released(mb_left);
global.key_pause = keyboard_check_pressed(vk_escape);
global.key_enter = keyboard_check_pressed(vk_enter);
global.key_up = keyboard_check_pressed(vk_up);
global.key_right = keyboard_check_pressed(vk_right);
global.key_down = keyboard_check_pressed(vk_down);
global.key_left = keyboard_check_pressed(vk_left);

// DEBUG KEYS
global.key_reset = keyboard_check_pressed(ord('R'));
global.key_clear = keyboard_check_pressed(ord('C'));

// PAUSE VARIABLES
paused = false;
takescreen = false;
mouse_x_paused = 0;

// CURSOR VARIABLES
cursor_sprite = spr_cursor;
global.no_cursor = false;
global.in_game = false;
prev_mouse_x = mouse_x;
prev_mouse_y = mouse_y;

// SETTINGS VARIABLES
global.difficulty = 1;
global.level_num = 0;
global.chunk_width = 7;
global.chunk_height = 3;
global.chunk_fill_chance = 0.1;
global.chunk_fill = 0.6;
global.center_x = 544;
global.center_y = 224;

//PLAYER VARIABLES
global.life = 3;

//TITLE VARIABLES
global.brick_frame = 0;
global.breaker_frame = 0;
global.breaker_alarm = room_speed;

// LEVEL PROGRESSION ARRAY
global.level[CHUNK_WIDTH, 0] = 4;
global.level[CHUNK_HEIGHT, 0] = 3;
global.level[CHUNK_FILL, 0] = 0.3;
global.level[LEVEL_SIZE, 0] = rm_level_small;
global.level[YELLOW_PERCENT, 0] = 0;
global.level[GREEN_PERCENT, 0] = 0;
global.level[BLACK_PERCENT, 0] = 0;

global.level[CHUNK_WIDTH, 1] = 5;
global.level[CHUNK_HEIGHT, 1] = 3;
global.level[CHUNK_FILL, 1] = 0.5;
global.level[LEVEL_SIZE, 1] = rm_level_small;
global.level[YELLOW_PERCENT, 1] = .2;
global.level[GREEN_PERCENT, 1] = 0;
global.level[BLACK_PERCENT, 1] = 0;

global.level[CHUNK_WIDTH, 2] = 6;
global.level[CHUNK_HEIGHT, 2] = 3;
global.level[CHUNK_FILL, 2] = 0.6;
global.level[LEVEL_SIZE, 2] = rm_level_small;
global.level[YELLOW_PERCENT, 2] = .3;
global.level[GREEN_PERCENT, 2] = 0;
global.level[BLACK_PERCENT, 2] = 0;

global.level[CHUNK_WIDTH, 3] = 6;
global.level[CHUNK_HEIGHT, 3] = 4;
global.level[CHUNK_FILL, 3] = 0.6;
global.level[LEVEL_SIZE, 3] = rm_level_small;
global.level[YELLOW_PERCENT, 3] = .4;
global.level[GREEN_PERCENT, 3] = 0;
global.level[BLACK_PERCENT, 3] = 0;

global.level[CHUNK_WIDTH, 4] = 7;
global.level[CHUNK_HEIGHT, 4] = 4;
global.level[CHUNK_FILL, 4] = 0.7;
global.level[LEVEL_SIZE, 4] = rm_level_med;
global.level[YELLOW_PERCENT, 4] = .2;
global.level[GREEN_PERCENT, 4] = .2;
global.level[BLACK_PERCENT, 4] = 0;

global.level[CHUNK_WIDTH, 5] = 9;
global.level[CHUNK_HEIGHT, 5] = 5;
global.level[CHUNK_FILL, 5] = 0.8;
global.level[LEVEL_SIZE, 5] = rm_level_small;
global.level[YELLOW_PERCENT, 5] = .2;
global.level[GREEN_PERCENT, 5] = .3;
global.level[BLACK_PERCENT, 5] = .2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(get_input);


// DEBUGGING CODE

key_game_over = keyboard_check_pressed(ord('G'));

if(key_game_over) {
    room_goto(rm_game_over);
}

// DEBUGGING CODE END




if(!global.in_game &amp;&amp; (mouse_x != prev_mouse_x || mouse_y != prev_mouse_y)) {
    global.no_cursor = false;
}
prev_mouse_x = mouse_x;
prev_mouse_y = mouse_y;

// Change mouse cursor depending on current situation
if(global.no_cursor) {
    window_mouse_set(clamp(window_mouse_get_x(),28,window_get_width()-28),clamp(window_mouse_get_y(),28,window_get_height()-28));
    cursor_sprite = spr_cursor_none;
} else {
    if(mouse_check_button(mb_left)) {
        cursor_sprite = spr_cursor_click;
    } else {
        cursor_sprite = spr_cursor;
    }    
}

if(global.key_reset) {
    game_restart();
}

// Pause Section
if(global.key_pause &amp;&amp; room != rm_main_menu) {
    if(paused) {
        // Reactivate everthing and free the paused surface from memory
        instance_activate_all();
        surface_free(pause_surface);
        window_mouse_set(mouse_x_paused, mouse_y);
        global.in_game = true;
        global.no_cursor = true;
        paused = false;
    } else {
        // Get the current surface to display while everthing is deactivated
        pause_surface = surface_create(view_wport[0], view_hport[0]);
        surface_copy(pause_surface, 0, 0, application_surface);
        
        //Deactivate everything for pause
        instance_deactivate_all(true);
        mouse_x_paused = mouse_x;
        global.in_game = false;
        global.no_cursor = false;
        paused = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw frozen surface if paused
if(paused) {
    draw_surface(pause_surface, 0, 0);
    draw_sprite(spr_paused, 0, 512, 480);
}

// Draw remaining lives
if(global.in_game || paused) {
    draw_sprite_ext(spr_ball, 0, 944, 16, .75, .75, 0, c_white, 1);
    draw_set_font(font_pirulen_sm);
    draw_set_halign(fa_left);
    draw_text(967, 6, "X " + string(global.life));
    draw_set_font(font_pirulen);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
